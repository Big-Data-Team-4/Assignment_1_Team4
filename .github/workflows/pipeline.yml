name: PDF Parser Pipeline

# Controls when the action will run
on:
  push:
    branches:
      - Test
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Set environment variables for the entire job
    env:
      AZURE_DOC_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOC_INTELLIGENCE_ENDPOINT }}
      AZURE_DOC_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOC_INTELLIGENCE_KEY }}
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install DVC and dependencies
        run: |
          pip install --upgrade pip
          pip uninstall PyMuPDF fitz -y || true
          pip install PyMuPDF==1.23.26
          pip install dvc
          pip install -r src/requirements.txt
      
      - name: Create output directories
        run: |
          mkdir -p src/data/parsed/pdfParser_output
          mkdir -p src/data/parsed/camelot_output
          mkdir -p src/data/parsed/layout_output
          mkdir -p src/data/parsed/docling_output
          mkdir -p src/data/parsed/fallback_output

      - name: Run DVC init
        run: dvc init

      - name: Run DVC Pipeline
        run: dvc repro --force
      
      - name: Upload Pipeline Results
        uses: actions/upload-artifact@v4
        with:
          name: pdf-processing-results
          path: src/data/parsed/
      
      - name: Display Results Summary
        run: |
          echo "âœ… PDF processing pipeline completed!"
          find src/data/parsed/ -type f | wc -l | xargs echo "Total output files:"