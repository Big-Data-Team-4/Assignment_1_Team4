# name: PDF Parser Pipeline

# # Controls when the action will run
# on:
#   push:
#     branches:
#       - Test
#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     # Set environment variables for the entire job
#     env:
#       AZURE_DOC_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOC_INTELLIGENCE_ENDPOINT }}
#       AZURE_DOC_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOC_INTELLIGENCE_KEY }}
    
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Setup Python 3.10
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'
      
#       - name: Install DVC and dependencies
#         run: |
#           pip install --upgrade pip
#           pip uninstall PyMuPDF fitz -y || true
#           pip install PyMuPDF==1.23.26
#           pip install dvc
#           pip install -r src/requirements.txt
      
#       - name: Create output directories
#         run: |
#           mkdir -p src/data/parsed/pdfParser_output
#           mkdir -p src/data/parsed/camelot_output
#           mkdir -p src/data/parsed/layout_output
#           mkdir -p src/data/parsed/docling_output
#           mkdir -p src/data/parsed/fallback_output

#       - name: Run DVC init
#         run: dvc init

#       - name: Run DVC Pipeline
#         run: dvc repro --force
      
#       - name: Upload Pipeline Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: pdf-processing-results
#           path: src/data/parsed/
      
#       - name: Display Results Summary
#         run: |
#           echo "✅ PDF processing pipeline completed!"
#           find src/data/parsed/ -type f | wc -l | xargs echo "Total output files:"



name: PDF Parser Pipeline
 
on:
  push:
    branches: [ Test ]
  workflow_dispatch:
 
jobs:
  deploy:
    runs-on: ubuntu-latest
 
    # allow this workflow to push commits
    permissions:
      contents: write
 
    env:
      AZURE_DOC_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOC_INTELLIGENCE_ENDPOINT }}
      AZURE_DOC_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOC_INTELLIGENCE_KEY }}
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
 
      # Optional but recommended for Camelot/OpenCV jobs
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript libgl1 poppler-utils
 
      - name: Install DVC and Python deps
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y fitz || true
          pip install -r src/requirements.txt
          pip install "dvc[azure,gs,s3,ssh]"
 
      # Create expected output dirs (idempotent)
      - name: Create output directories
        run: |
          mkdir -p src/data/parsed/pdfParser_output
          mkdir -p src/data/parsed/camelot_output
          mkdir -p src/data/parsed/layout_output
          mkdir -p src/data/parsed/docling_output
          mkdir -p src/data/parsed/fallback_output
 
      # If your pipeline has DVC inputs, pull them (safe to skip if none)
      - name: dvc pull (inputs)
        run: dvc pull || true
 
      - name: Run DVC Pipeline
        run: dvc repro --force
 
      # Ensure these paths are not ignored by .gitignore (in case an older DVC config added them)
      - name: Ensure outputs are not gitignored
        run: |
          if test -f .gitignore; then
            sed -i '/^src\/data\/parsed\//d' .gitignore || true
            git add .gitignore || true
          fi
          git check-ignore -v src/data/parsed/** || true
 
      # (Optional) Use Git LFS for big files to keep repo size sane
      - name: Setup Git LFS (optional)
        run: |
          sudo apt-get install -y git-lfs
          git lfs install
          git lfs track "src/data/parsed/**/*.{png,csv,json,jsonl,md}"
          git add .gitattributes || true
 
      - name: Commit parsed outputs to repo
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A src/data/parsed
          if git diff --cached --quiet; then
            echo "No parsed-output changes to commit."
          else
            git commit -m "CI: add parsed outputs [skip ci]"
            git push
          fi
 
      # Keep an artifact too (handy for quick download from the run)
      - name: Upload Pipeline Results (optional)
        uses: actions/upload-artifact@v4
        with:
          name: pdf-processing-results
          path: src/data/parsed/
 
      - name: Display Results Summary
        run: |
          echo "✅ PDF processing pipeline completed!"
          find src/data/parsed/ -type f | wc -l | xargs echo "Total output files:"