name: PDF Parser Pipeline
 
on:
  push:
    branches: [ Test ]
  workflow_dispatch:
 
jobs:
  deploy:
    runs-on: ubuntu-latest
 
    # allow this workflow to push commits
    permissions:
      contents: write
 
    env:
      AZURE_DOC_INTELLIGENCE_ENDPOINT: ${{ secrets.AZURE_DOC_INTELLIGENCE_ENDPOINT }}
      AZURE_DOC_INTELLIGENCE_KEY: ${{ secrets.AZURE_DOC_INTELLIGENCE_KEY }}
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
 
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
 
      # Optional but recommended for Camelot/OpenCV jobs
      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y ghostscript libgl1 poppler-utils
 
      - name: Install DVC and Python deps
        run: |
          python -m pip install --upgrade pip
          pip uninstall -y fitz || true
          pip install -r src/requirements.txt
          pip install "dvc[azure,gs,s3,ssh]"

      # NEW STEP: Clean existing outputs to override them
      - name: Override existing outputs
        run: |
          echo "ðŸ§¹ Cleaning existing outputs to generate fresh results..."
          rm -rf src/data/parsed/pdfParser_output/*
          rm -rf src/data/parsed/camelot_output/*
          rm -rf src/data/parsed/layout_output/*
          rm -rf src/data/parsed/docling_output/*
          rm -rf src/data/parsed/fallback_output/*
          echo "Ready for new outputs"
 
      # Create expected output dirs (idempotent)
      - name: Create output directories
        run: |
          mkdir -p src/data/parsed/pdfParser_output
          mkdir -p src/data/parsed/camelot_output
          mkdir -p src/data/parsed/layout_output
          mkdir -p src/data/parsed/docling_output
          mkdir -p src/data/parsed/fallback_output
 
      # If your pipeline has DVC inputs, pull them (safe to skip if none)
      # Handle existing DVC setup
      - name: Initialize or reset DVC
        run: |
          if [ -d ".dvc" ]; then
            echo "DVC already initialized, forcing reinit..."
            dvc init --force
          else
            dvc init
          fi
     
      # Pull any DVC-tracked inputs (skip outputs)
      - name: dvc pull (inputs only)
        run: |
          dvc pull || echo "No DVC inputs to pull, continuing..."
 
      # Remove any DVC tracking of output directories
      - name: Remove DVC tracking of output directories
        run: |
          # Remove any .dvc files that track our output directories
          find . -name "*.dvc" -path "*/parsed/*" -delete || true
          # Remove output directories from dvc.yaml if they exist as outputs
          echo "Checking dvc.yaml for output directory tracking..."
 
      - name: Run DVC Pipeline
        run: dvc repro --force
 
      # CRITICAL: Remove DVC's .gitignore entries for our output directory
      - name: Remove src/data/parsed from .gitignore
        run: |
          echo "Before removing from .gitignore:"
          cat .gitignore | grep -E "(src/data|/data/parsed)" || echo "No data entries found"
         
          # Remove any lines that ignore our parsed output directory
          sed -i '\|^src/data/parsed|d' .gitignore
          sed -i '\|^/src/data/parsed|d' .gitignore
          sed -i '\|src/data/parsed/|d' .gitignore
          sed -i '\|/src/data/parsed/|d' .gitignore
         
          echo "After removing from .gitignore:"
          cat .gitignore | grep -E "(src/data|/data/parsed)" || echo "No data entries found"
         
          # Verify files are not ignored
          echo "Checking if files are ignored:"
          git check-ignore src/data/parsed/* || echo "Files are NOT ignored"
 
      # Configure git before making changes
      - name: Configure Git
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
 
      # Stage and commit the parsed outputs
      - name: Commit parsed outputs to repository
        run: |
          echo "Files in src/data/parsed:"
          find src/data/parsed/ -type f | head -20
         
          echo "Adding files to git..."
          git add -f src/data/parsed/
          git add .gitignore
         
          echo "Files staged:"
          git diff --cached --name-only
         
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            echo "Committing changes..."
            git commit -m "CI: Update parsed PDF outputs [skip ci]"
            git push
            echo "Successfully committed parsed outputs to repository"
          fi
 
      # Keep an artifact as backup
      - name: Upload Pipeline Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf-processing-results
          path: src/data/parsed/
          retention-days: 30
 
      - name: Display Results Summary
        run: |
          echo "PDF processing pipeline completed!"
          echo "Output directory contents:"
          find src/data/parsed/ -type f | wc -l | xargs echo "Total output files:"
          echo ""
          echo "Files by directory:"
          find src/data/parsed/ -type f | cut -d'/' -f1-4 | sort | uniq -c
          echo ""
          echo "Sample files:"
          find src/data/parsed/ -type f | head -10